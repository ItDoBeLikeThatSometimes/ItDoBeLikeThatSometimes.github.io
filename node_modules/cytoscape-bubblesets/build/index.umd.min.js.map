{"version":3,"file":"index.umd.min.js","sources":["../../../../.yarn/berry/cache/tslib-npm-2.6.2-4fc8c068d9-10c0.zip/node_modules/tslib/tslib.es6.js","../../../../.yarn/berry/cache/bubblesets-js-npm-2.3.0-9b0f671cb6-10c0.zip/node_modules/bubblesets-js/build/index.js","../../../../.yarn/berry/cache/lodash.throttle-npm-4.1.1-856641af92-10c0.zip/node_modules/lodash.throttle/index.js","../src/BubbleSetPath.ts","../src/BubbleSetsPlugin.ts","../src/index.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","/**\n * bubblesets-js\n * https://github.com/upsetjs/bubblesets-js\n *\n * Copyright (c) 2021-2022 Samuel Gratzl <sam@sgratzl.com>\n */\n\nfunction linePtSegDistSq(lx1, ly1, lx2, ly2, x, y) {\r\n    const x1 = lx1;\r\n    const y1 = ly1;\r\n    const x2 = lx2 - x1;\r\n    const y2 = ly2 - y1;\r\n    let px = x - x1;\r\n    let py = y - y1;\r\n    let dotprod = px * x2 + py * y2;\r\n    let projlenSq = 0;\r\n    if (dotprod <= 0) {\r\n        projlenSq = 0;\r\n    }\r\n    else {\r\n        px = x2 - px;\r\n        py = y2 - py;\r\n        dotprod = px * x2 + py * y2;\r\n        if (dotprod <= 0) {\r\n            projlenSq = 0;\r\n        }\r\n        else {\r\n            projlenSq = (dotprod * dotprod) / (x2 * x2 + y2 * y2);\r\n        }\r\n    }\r\n    const lenSq = px * px + py * py - projlenSq;\r\n    if (lenSq < 0) {\r\n        return 0;\r\n    }\r\n    return lenSq;\r\n}\r\nfunction ptsDistanceSq(x1, y1, x2, y2) {\r\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\r\n}\r\nfunction doublePointsEqual(x1, y1, x2, y2, delta) {\r\n    return ptsDistanceSq(x1, y1, x2, y2) < delta * delta;\r\n}\r\nfunction round(digits) {\r\n    if (!Number.isFinite(digits)) {\r\n        return (v) => v;\r\n    }\r\n    if (digits === 0) {\r\n        return Math.round;\r\n    }\r\n    const factor = Math.pow(10, digits);\r\n    return (v) => Math.round(v * factor) / factor;\r\n}\n\nfunction lineBoundingBox(line) {\r\n    const minX = Math.min(line.x1, line.x2);\r\n    const maxX = Math.max(line.x1, line.x2);\r\n    const minY = Math.min(line.y1, line.y2);\r\n    const maxY = Math.max(line.y1, line.y2);\r\n    return {\r\n        x: minX,\r\n        y: minY,\r\n        x2: maxX,\r\n        y2: maxY,\r\n        width: maxX - minX,\r\n        height: maxY - minY,\r\n    };\r\n}\r\nclass Line {\r\n    constructor(x1, y1, x2, y2) {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n    }\r\n    equals(that) {\r\n        return this.x1 === that.x1 && this.y1 === that.y1 && this.x2 === that.x2 && this.y2 === that.y2;\r\n    }\r\n    draw(ctx) {\r\n        ctx.moveTo(this.x1, this.y1);\r\n        ctx.lineTo(this.x2, this.y2);\r\n    }\r\n    toString() {\r\n        return `Line(from=(${this.x1},${this.y1}),to=(${this.x2},${this.y2}))`;\r\n    }\r\n    static from(l) {\r\n        return new Line(l.x1, l.y1, l.x2, l.y2);\r\n    }\r\n    cuts(px, py) {\r\n        if (this.y1 === this.y2) {\r\n            return false;\r\n        }\r\n        if ((py < this.y1 && py <= this.y2) || (py > this.y1 && py >= this.y2)) {\r\n            return false;\r\n        }\r\n        if (px > this.x1 && px >= this.x2) {\r\n            return false;\r\n        }\r\n        if (px < this.x1 && px <= this.x2) {\r\n            return true;\r\n        }\r\n        const cross = this.x1 + ((py - this.y1) * (this.x2 - this.x1)) / (this.y2 - this.y1);\r\n        return px <= cross;\r\n    }\r\n    distSquare(x, y) {\r\n        return linePtSegDistSq(this.x1, this.y1, this.x2, this.y2, x, y);\r\n    }\r\n    ptClose(x, y, r) {\r\n        if (this.x1 < this.x2) {\r\n            if (x < this.x1 - r || x > this.x2 + r) {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            if (x < this.x2 - r || x > this.x1 + r) {\r\n                return false;\r\n            }\r\n        }\r\n        if (this.y1 < this.y2) {\r\n            if (y < this.y1 - r || y > this.y2 + r) {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            if (y < this.y2 - r || y > this.y1 + r) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\n\nvar EState;\r\n(function (EState) {\r\n    EState[EState[\"POINT\"] = 1] = \"POINT\";\r\n    EState[EState[\"PARALLEL\"] = 2] = \"PARALLEL\";\r\n    EState[EState[\"COINCIDENT\"] = 3] = \"COINCIDENT\";\r\n    EState[EState[\"NONE\"] = 4] = \"NONE\";\r\n})(EState || (EState = {}));\r\nclass Intersection {\r\n    constructor(state, x = 0, y = 0) {\r\n        this.state = state;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\nfunction intersectLineLine(la, lb) {\r\n    const uaT = (lb.x2 - lb.x1) * (la.y1 - lb.y1) - (lb.y2 - lb.y1) * (la.x1 - lb.x1);\r\n    const ubT = (la.x2 - la.x1) * (la.y1 - lb.y1) - (la.y2 - la.y1) * (la.x1 - lb.x1);\r\n    const uB = (lb.y2 - lb.y1) * (la.x2 - la.x1) - (lb.x2 - lb.x1) * (la.y2 - la.y1);\r\n    if (uB) {\r\n        const ua = uaT / uB;\r\n        const ub = ubT / uB;\r\n        if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\r\n            return new Intersection(EState.POINT, la.x1 + ua * (la.x2 - la.x1), la.y1 + ua * (la.y2 - la.y1));\r\n        }\r\n        return new Intersection(EState.NONE);\r\n    }\r\n    return new Intersection(uaT === 0 || ubT === 0 ? EState.COINCIDENT : EState.PARALLEL);\r\n}\r\nfunction fractionAlongLineA(la, lb) {\r\n    const uaT = (lb.x2 - lb.x1) * (la.y1 - lb.y1) - (lb.y2 - lb.y1) * (la.x1 - lb.x1);\r\n    const ubT = (la.x2 - la.x1) * (la.y1 - lb.y1) - (la.y2 - la.y1) * (la.x1 - lb.x1);\r\n    const uB = (lb.y2 - lb.y1) * (la.x2 - la.x1) - (lb.x2 - lb.x1) * (la.y2 - la.y1);\r\n    if (uB) {\r\n        const ua = uaT / uB;\r\n        const ub = ubT / uB;\r\n        if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\r\n            return ua;\r\n        }\r\n    }\r\n    return Number.POSITIVE_INFINITY;\r\n}\r\nfunction hasFractionToLineCenter(bounds, line) {\r\n    function testLine(xa, ya, xb, yb) {\r\n        let testDistance = fractionAlongLineA(line, new Line(xa, ya, xb, yb));\r\n        testDistance = Math.abs(testDistance - 0.5);\r\n        if (testDistance >= 0 && testDistance <= 1) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    let countIntersections = testLine(bounds.x, bounds.y, bounds.x2, bounds.y);\r\n    countIntersections += testLine(bounds.x, bounds.y, bounds.x, bounds.y2);\r\n    if (countIntersections > 1) {\r\n        return true;\r\n    }\r\n    countIntersections += testLine(bounds.x, bounds.y2, bounds.x2, bounds.y2);\r\n    if (countIntersections > 1) {\r\n        return true;\r\n    }\r\n    countIntersections += testLine(bounds.x2, bounds.y, bounds.x2, bounds.y2);\r\n    return countIntersections > 0;\r\n}\r\nvar OutCode;\r\n(function (OutCode) {\r\n    OutCode[OutCode[\"LEFT\"] = 0] = \"LEFT\";\r\n    OutCode[OutCode[\"TOP\"] = 1] = \"TOP\";\r\n    OutCode[OutCode[\"RIGHT\"] = 2] = \"RIGHT\";\r\n    OutCode[OutCode[\"BOTTOM\"] = 3] = \"BOTTOM\";\r\n})(OutCode || (OutCode = {}));\r\nfunction outcode(bounds, px, py) {\r\n    const out = new Set();\r\n    if (bounds.width <= 0) {\r\n        out.add(OutCode.LEFT);\r\n        out.add(OutCode.RIGHT);\r\n    }\r\n    else if (px < bounds.x) {\r\n        out.add(OutCode.LEFT);\r\n    }\r\n    else if (px > bounds.x + bounds.width) {\r\n        out.add(OutCode.RIGHT);\r\n    }\r\n    if (bounds.height <= 0) {\r\n        out.add(OutCode.TOP);\r\n        out.add(OutCode.BOTTOM);\r\n    }\r\n    else if (py < bounds.y) {\r\n        out.add(OutCode.TOP);\r\n    }\r\n    else if (py > bounds.y + bounds.height) {\r\n        out.add(OutCode.BOTTOM);\r\n    }\r\n    return out;\r\n}\r\nfunction intersectsLine(bounds, line) {\r\n    let x1 = line.x1;\r\n    let y1 = line.y1;\r\n    const x2 = line.x2;\r\n    const y2 = line.y2;\r\n    const out2 = Array.from(outcode(bounds, x2, y2));\r\n    if (out2.length === 0) {\r\n        return true;\r\n    }\r\n    let out1 = outcode(bounds, x1, y1);\r\n    while (out1.size !== 0) {\r\n        for (const a of out2) {\r\n            if (out1.has(a)) {\r\n                return false;\r\n            }\r\n        }\r\n        if (out1.has(OutCode.RIGHT) || out1.has(OutCode.LEFT)) {\r\n            let x = bounds.x;\r\n            if (out1.has(OutCode.RIGHT)) {\r\n                x += bounds.width;\r\n            }\r\n            y1 = y1 + ((x - x1) * (y2 - y1)) / (x2 - x1);\r\n            x1 = x;\r\n        }\r\n        else {\r\n            let y = bounds.y;\r\n            if (out1.has(OutCode.BOTTOM)) {\r\n                y += bounds.height;\r\n            }\r\n            x1 = x1 + ((y - y1) * (x2 - x1)) / (y2 - y1);\r\n            y1 = y;\r\n        }\r\n        out1 = outcode(bounds, x1, y1);\r\n    }\r\n    return true;\r\n}\r\nfunction fractionToLineCenter(bounds, line) {\r\n    let minDistance = Number.POSITIVE_INFINITY;\r\n    let countIntersections = 0;\r\n    function testLine(xa, ya, xb, yb) {\r\n        let testDistance = fractionAlongLineA(line, new Line(xa, ya, xb, yb));\r\n        testDistance = Math.abs(testDistance - 0.5);\r\n        if (testDistance >= 0 && testDistance <= 1) {\r\n            countIntersections++;\r\n            if (testDistance < minDistance) {\r\n                minDistance = testDistance;\r\n            }\r\n        }\r\n    }\r\n    testLine(bounds.x, bounds.y, bounds.x2, bounds.y);\r\n    testLine(bounds.x, bounds.y, bounds.x, bounds.y2);\r\n    if (countIntersections > 1) {\r\n        return minDistance;\r\n    }\r\n    testLine(bounds.x, bounds.y2, bounds.x2, bounds.y2);\r\n    if (countIntersections > 1) {\r\n        return minDistance;\r\n    }\r\n    testLine(bounds.x2, bounds.y, bounds.x2, bounds.y2);\r\n    if (countIntersections === 0) {\r\n        return -1;\r\n    }\r\n    return minDistance;\r\n}\r\nfunction testIntersection(line, bounds) {\r\n    let count = 0;\r\n    const top = intersectLineLine(line, new Line(bounds.x, bounds.y, bounds.x2, bounds.y));\r\n    count += top.state === EState.POINT ? 1 : 0;\r\n    const left = intersectLineLine(line, new Line(bounds.x, bounds.y, bounds.x, bounds.y2));\r\n    count += left.state === EState.POINT ? 1 : 0;\r\n    const bottom = intersectLineLine(line, new Line(bounds.x, bounds.y2, bounds.x2, bounds.y2));\r\n    count += bottom.state === EState.POINT ? 1 : 0;\r\n    const right = intersectLineLine(line, new Line(bounds.x2, bounds.y, bounds.x2, bounds.y2));\r\n    count += right.state === EState.POINT ? 1 : 0;\r\n    return { top, left, bottom, right, count };\r\n}\n\nclass Rectangle {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    get x2() {\r\n        return this.x + this.width;\r\n    }\r\n    get y2() {\r\n        return this.y + this.height;\r\n    }\r\n    get cx() {\r\n        return this.x + this.width / 2;\r\n    }\r\n    get cy() {\r\n        return this.y + this.height / 2;\r\n    }\r\n    get radius() {\r\n        return Math.max(this.width, this.height) / 2;\r\n    }\r\n    static from(r) {\r\n        return new Rectangle(r.x, r.y, r.width, r.height);\r\n    }\r\n    equals(that) {\r\n        return this.x === that.x && this.y === that.y && this.width === that.width && this.height === that.height;\r\n    }\r\n    clone() {\r\n        return new Rectangle(this.x, this.y, this.width, this.height);\r\n    }\r\n    add(that) {\r\n        const x = Math.min(this.x, that.x);\r\n        const y = Math.min(this.y, that.y);\r\n        const x2 = Math.max(this.x2, that.x + that.width);\r\n        const y2 = Math.max(this.y2, that.y + that.height);\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = x2 - x;\r\n        this.height = y2 - y;\r\n    }\r\n    addPoint(p) {\r\n        const x = Math.min(this.x, p.x);\r\n        const y = Math.min(this.y, p.y);\r\n        const x2 = Math.max(this.x2, p.x);\r\n        const y2 = Math.max(this.y2, p.y);\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = x2 - x;\r\n        this.height = y2 - y;\r\n    }\r\n    toString() {\r\n        return `Rectangle[x=${this.x}, y=${this.y}, w=${this.width}, h=${this.height}]`;\r\n    }\r\n    draw(ctx) {\r\n        ctx.rect(this.x, this.y, this.width, this.height);\r\n    }\r\n    containsPt(px, py) {\r\n        return px >= this.x && px <= this.x2 && py >= this.y && py <= this.y2;\r\n    }\r\n    get area() {\r\n        return this.width * this.height;\r\n    }\r\n    intersects(that) {\r\n        if (this.area <= 0 || that.width <= 0 || that.height <= 0) {\r\n            return false;\r\n        }\r\n        return that.x + that.width > this.x && that.y + that.height > this.y && that.x < this.x2 && that.y < this.y2;\r\n    }\r\n    distSquare(tempX, tempY) {\r\n        if (this.containsPt(tempX, tempY)) {\r\n            return 0;\r\n        }\r\n        const code = outcode(this, tempX, tempY);\r\n        if (code.has(OutCode.TOP)) {\r\n            if (code.has(OutCode.LEFT)) {\r\n                return ptsDistanceSq(tempX, tempY, this.x, this.y);\r\n            }\r\n            if (code.has(OutCode.RIGHT)) {\r\n                return ptsDistanceSq(tempX, tempY, this.x2, this.y);\r\n            }\r\n            return (this.y - tempY) * (this.y - tempY);\r\n        }\r\n        if (code.has(OutCode.BOTTOM)) {\r\n            if (code.has(OutCode.LEFT)) {\r\n                return ptsDistanceSq(tempX, tempY, this.x, this.y2);\r\n            }\r\n            if (code.has(OutCode.RIGHT)) {\r\n                return ptsDistanceSq(tempX, tempY, this.x2, this.y2);\r\n            }\r\n            return (tempY - this.y2) * (tempY - this.y2);\r\n        }\r\n        if (code.has(OutCode.LEFT)) {\r\n            return (this.x - tempX) * (this.x - tempX);\r\n        }\r\n        if (code.has(OutCode.RIGHT)) {\r\n            return (tempX - this.x2) * (tempX - this.x2);\r\n        }\r\n        return 0;\r\n    }\r\n}\r\nfunction boundingBox(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const first = path[0];\r\n    const bb = new Rectangle(first.x, first.y, 0, 0);\r\n    for (const point of path) {\r\n        bb.addPoint(point);\r\n    }\r\n    return bb;\r\n}\n\nclass Circle {\r\n    constructor(cx, cy, radius) {\r\n        this.cx = cx;\r\n        this.cy = cy;\r\n        this.radius = radius;\r\n    }\r\n    get x() {\r\n        return this.cx - this.radius;\r\n    }\r\n    get x2() {\r\n        return this.cx + this.radius;\r\n    }\r\n    get width() {\r\n        return this.radius * 2;\r\n    }\r\n    get y() {\r\n        return this.cy - this.radius;\r\n    }\r\n    get y2() {\r\n        return this.cy + this.radius;\r\n    }\r\n    get height() {\r\n        return this.radius * 2;\r\n    }\r\n    static from(r) {\r\n        return new Circle(r.cx, r.cy, r.radius);\r\n    }\r\n    containsPt(x, y) {\r\n        return ptsDistanceSq(this.cx, this.cy, x, y) < this.radius * this.radius;\r\n    }\r\n    distSquare(tempX, tempY) {\r\n        const dist = ptsDistanceSq(this.cx, this.cy, tempX, tempY);\r\n        if (dist < this.radius * this.radius) {\r\n            return 0;\r\n        }\r\n        const offset = Math.sqrt(dist) - this.radius;\r\n        return offset * offset;\r\n    }\r\n    draw(ctx) {\r\n        ctx.ellipse(this.cx, this.cy, this.radius, this.radius, 0, 0, Math.PI * 2);\r\n    }\r\n}\n\nclass Area {\r\n    constructor(pixelGroup, i = 0, j = 0, pixelX = 0, pixelY = 0, width = 10, height = 10, pixels = new Float32Array(Math.max(0, width * height)).fill(0)) {\r\n        this.pixelGroup = pixelGroup;\r\n        this.i = i;\r\n        this.j = j;\r\n        this.pixelX = pixelX;\r\n        this.pixelY = pixelY;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.area = pixels;\r\n    }\r\n    createSub(rect, pixelPos) {\r\n        return new Area(this.pixelGroup, rect.x, rect.y, pixelPos.x, pixelPos.y, rect.width, rect.height);\r\n    }\r\n    static fromPixelRegion(pixelRect, pixelGroup) {\r\n        return new Area(pixelGroup, 0, 0, pixelRect.x, pixelRect.y, Math.ceil(pixelRect.width / pixelGroup), Math.ceil(pixelRect.height / pixelGroup));\r\n    }\r\n    copy(sub, pixelPoint) {\r\n        return new Area(this.pixelGroup, this.scaleX(pixelPoint.x), this.scaleY(pixelPoint.y), pixelPoint.x, pixelPoint.y, sub.width, sub.height, sub.area);\r\n    }\r\n    boundX(pos) {\r\n        if (pos < this.i) {\r\n            return this.i;\r\n        }\r\n        if (pos >= this.width) {\r\n            return this.width - 1;\r\n        }\r\n        return pos;\r\n    }\r\n    boundY(pos) {\r\n        if (pos < this.j) {\r\n            return this.j;\r\n        }\r\n        if (pos >= this.height) {\r\n            return this.height - 1;\r\n        }\r\n        return pos;\r\n    }\r\n    scaleX(pixel) {\r\n        return this.boundX(Math.floor((pixel - this.pixelX) / this.pixelGroup));\r\n    }\r\n    scaleY(pixel) {\r\n        return this.boundY(Math.floor((pixel - this.pixelY) / this.pixelGroup));\r\n    }\r\n    scale(pixelRect) {\r\n        const x = this.scaleX(pixelRect.x);\r\n        const y = this.scaleY(pixelRect.y);\r\n        const x2 = this.boundX(Math.ceil((pixelRect.x + pixelRect.width - this.pixelX) / this.pixelGroup));\r\n        const y2 = this.boundY(Math.ceil((pixelRect.y + pixelRect.height - this.pixelY) / this.pixelGroup));\r\n        const width = x2 - x;\r\n        const height = y2 - y;\r\n        return new Rectangle(x, y, width, height);\r\n    }\r\n    invertScaleX(v) {\r\n        return Math.round(v * this.pixelGroup + this.pixelX);\r\n    }\r\n    invertScaleY(v) {\r\n        return Math.round(v * this.pixelGroup + this.pixelY);\r\n    }\r\n    addPadding(rect, pixelPadding) {\r\n        const padding = Math.ceil(pixelPadding / this.pixelGroup);\r\n        const x = this.boundX(rect.x - padding);\r\n        const y = this.boundY(rect.y - padding);\r\n        const x2 = this.boundX(rect.x2 + padding);\r\n        const y2 = this.boundY(rect.y2 + padding);\r\n        const width = x2 - x;\r\n        const height = y2 - y;\r\n        return new Rectangle(x, y, width, height);\r\n    }\r\n    get(i, j) {\r\n        if (i < 0 || j < 0 || i >= this.width || j >= this.height) {\r\n            return Number.NaN;\r\n        }\r\n        return this.area[i + j * this.width];\r\n    }\r\n    inc(i, j, v) {\r\n        if (i < 0 || j < 0 || i >= this.width || j >= this.height) {\r\n            return;\r\n        }\r\n        this.area[i + j * this.width] += v;\r\n    }\r\n    set(i, j, v) {\r\n        if (i < 0 || j < 0 || i >= this.width || j >= this.height) {\r\n            return;\r\n        }\r\n        this.area[i + j * this.width] = v;\r\n    }\r\n    incArea(sub, factor) {\r\n        if (sub.width <= 0 || sub.height <= 0 || factor === 0) {\r\n            return;\r\n        }\r\n        const w = this.width;\r\n        const aw = sub.width;\r\n        const i1 = Math.max(0, sub.i);\r\n        const j1 = Math.max(0, sub.j);\r\n        const i2 = Math.min(sub.i + sub.width, w);\r\n        const j2 = Math.min(sub.j + sub.height, this.height);\r\n        if (j2 <= 0 || i2 <= 0 || i1 >= w || j2 >= this.height) {\r\n            return;\r\n        }\r\n        for (let j = j1; j < j2; j++) {\r\n            const subRow = (j - sub.j) * aw;\r\n            const row = j * w;\r\n            for (let i = i1; i < i2; i++) {\r\n                const v = sub.area[i - sub.i + subRow];\r\n                if (v === 0) {\r\n                    continue;\r\n                }\r\n                this.area[i + row] += factor * v;\r\n            }\r\n        }\r\n    }\r\n    fill(value) {\r\n        this.area.fill(value);\r\n    }\r\n    fillArea(rect, value) {\r\n        const offset = rect.x + rect.y * this.width;\r\n        for (let j = 0; j < rect.height; j++) {\r\n            const pos = offset + j * this.width;\r\n            this.area.fill(value, pos, pos + rect.width);\r\n        }\r\n    }\r\n    fillHorizontalLine(i, j, width, value) {\r\n        const offset = i + j * this.width;\r\n        this.area.fill(value, offset, offset + width);\r\n    }\r\n    fillVerticalLine(i, j, height, value) {\r\n        const offset = i + j * this.width;\r\n        for (let k = 0; k < height; k++) {\r\n            this.area[offset + k * this.width] = value;\r\n        }\r\n    }\r\n    clear() {\r\n        this.area.fill(0);\r\n    }\r\n    toString() {\r\n        let r = '';\r\n        for (let j = 0; j < this.height; j++) {\r\n            const row = j * this.width;\r\n            for (let i = 0; i < this.width; i++) {\r\n                const v = this.area[row + i];\r\n                r += v.toFixed(1).padStart(6);\r\n                r += ' ';\r\n            }\r\n            r += '\\n';\r\n        }\r\n        return r;\r\n    }\r\n    draw(ctx, offset = true) {\r\n        if (this.width <= 0 || this.height <= 0) {\r\n            return;\r\n        }\r\n        ctx.save();\r\n        if (offset) {\r\n            ctx.translate(this.pixelX, this.pixelY);\r\n        }\r\n        const min = this.area.reduce((acc, v) => Math.min(acc, v), Number.POSITIVE_INFINITY);\r\n        const max = this.area.reduce((acc, v) => Math.max(acc, v), Number.NEGATIVE_INFINITY);\r\n        const scale = (v) => (v - min) / (max - min);\r\n        ctx.scale(this.pixelGroup, this.pixelGroup);\r\n        for (let i = 0; i < this.width; i++) {\r\n            for (let j = 0; j < this.height; j++) {\r\n                const v = this.area[i + j * this.width];\r\n                ctx.fillStyle = `rgba(0, 0, 0, ${scale(v)})`;\r\n                ctx.fillRect(i, j, 1, 1);\r\n            }\r\n        }\r\n        ctx.restore();\r\n    }\r\n    drawThreshold(ctx, threshold, offset = true) {\r\n        if (this.width <= 0 || this.height <= 0) {\r\n            return;\r\n        }\r\n        ctx.save();\r\n        if (offset) {\r\n            ctx.translate(this.pixelX, this.pixelY);\r\n        }\r\n        ctx.scale(this.pixelGroup, this.pixelGroup);\r\n        for (let i = 0; i < this.width; i++) {\r\n            for (let j = 0; j < this.height; j++) {\r\n                const v = this.area[i + j * this.width];\r\n                ctx.fillStyle = v > threshold ? 'black' : 'white';\r\n                ctx.fillRect(i, j, 1, 1);\r\n            }\r\n        }\r\n        ctx.restore();\r\n    }\r\n}\n\nfunction addPadding(rect, padding) {\r\n    const map = (r) => ({\r\n        x: r.x - padding,\r\n        y: r.y - padding,\r\n        width: r.width + 2 * padding,\r\n        height: r.height + 2 * padding,\r\n    });\r\n    if (Array.isArray(rect)) {\r\n        return rect.map(map);\r\n    }\r\n    return map(rect);\r\n}\n\nfunction createLineInfluenceArea(line, potentialArea, padding) {\r\n    return createGenericInfluenceArea(Object.assign(lineBoundingBox(line), {\r\n        distSquare: (x, y) => linePtSegDistSq(line.x1, line.y1, line.x2, line.y2, x, y),\r\n    }), potentialArea, padding);\r\n}\r\nfunction createGenericInfluenceArea(shape, potentialArea, padding) {\r\n    const lr = addPadding(shape, padding);\r\n    const scaled = potentialArea.scale(lr);\r\n    const area = potentialArea.createSub(scaled, lr);\r\n    sample(area, potentialArea, padding, (x, y) => shape.distSquare(x, y));\r\n    return area;\r\n}\r\nfunction sample(area, potentialArea, padding, distanceFunction) {\r\n    const padding2 = padding * padding;\r\n    for (let y = 0; y < area.height; y++) {\r\n        for (let x = 0; x < area.width; x++) {\r\n            const tempX = potentialArea.invertScaleX(area.i + x);\r\n            const tempY = potentialArea.invertScaleY(area.j + y);\r\n            const distanceSq = distanceFunction(tempX, tempY);\r\n            if (distanceSq === 0) {\r\n                area.set(x, y, padding2);\r\n                continue;\r\n            }\r\n            if (distanceSq < padding2) {\r\n                const dr = padding - Math.sqrt(distanceSq);\r\n                area.set(x, y, dr * dr);\r\n            }\r\n        }\r\n    }\r\n    return area;\r\n}\r\nfunction createRectangleInfluenceArea(rect, potentialArea, padding) {\r\n    const scaled = potentialArea.scale(rect);\r\n    const padded = potentialArea.addPadding(scaled, padding);\r\n    const area = potentialArea.createSub(padded, { x: rect.x - padding, y: rect.y - padding });\r\n    const paddingLeft = scaled.x - padded.x;\r\n    const paddingTop = scaled.y - padded.y;\r\n    const paddingRight = padded.x2 - scaled.x2;\r\n    const paddingBottom = padded.y2 - scaled.y2;\r\n    const innerWidth = padded.width - paddingLeft - paddingRight;\r\n    const innerHeight = padded.height - paddingTop - paddingBottom;\r\n    const padding2 = padding * padding;\r\n    area.fillArea({\r\n        x: paddingLeft,\r\n        y: paddingTop,\r\n        width: innerWidth + 1,\r\n        height: innerHeight + 1,\r\n    }, padding2);\r\n    const straightDistances = [0];\r\n    const maxPadding = Math.max(paddingTop, paddingLeft, paddingRight, paddingBottom);\r\n    {\r\n        const tempX = potentialArea.invertScaleX(scaled.x + scaled.width / 2);\r\n        for (let i = 1; i < maxPadding; i++) {\r\n            const tempY = potentialArea.invertScaleY(scaled.y - i);\r\n            const distanceSq = rect.distSquare(tempX, tempY);\r\n            if (distanceSq < padding2) {\r\n                const dr = padding - Math.sqrt(distanceSq);\r\n                straightDistances.push(dr * dr);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    const cornerDistances = [];\r\n    const maxHorizontalPadding = Math.max(paddingLeft, paddingRight);\r\n    const maxVerticalPadding = Math.max(paddingTop, paddingRight);\r\n    for (let i = 1; i < maxHorizontalPadding; i++) {\r\n        const tempX = potentialArea.invertScaleX(scaled.x - i);\r\n        const row = [];\r\n        for (let j = 1; j < maxVerticalPadding; j++) {\r\n            const tempY = potentialArea.invertScaleY(scaled.y - j);\r\n            const distanceSq = rect.distSquare(tempX, tempY);\r\n            if (distanceSq < padding2) {\r\n                const dr = padding - Math.sqrt(distanceSq);\r\n                row.push(dr * dr);\r\n            }\r\n            else {\r\n                row.push(0);\r\n            }\r\n        }\r\n        cornerDistances.push(row);\r\n    }\r\n    for (let y = 1; y < Math.min(paddingTop, straightDistances.length); y++) {\r\n        const value = straightDistances[y];\r\n        area.fillHorizontalLine(paddingLeft, paddingTop - y, innerWidth + 1, value);\r\n    }\r\n    for (let y = 1; y < Math.min(paddingBottom, straightDistances.length); y++) {\r\n        const value = straightDistances[y];\r\n        area.fillHorizontalLine(paddingLeft, paddingTop + innerHeight + y, innerWidth + 1, value);\r\n    }\r\n    for (let x = 1; x < Math.min(paddingLeft, straightDistances.length); x++) {\r\n        const value = straightDistances[x];\r\n        area.fillVerticalLine(paddingLeft - x, paddingTop, innerHeight + 1, value);\r\n    }\r\n    for (let x = 1; x < Math.min(paddingBottom, straightDistances.length); x++) {\r\n        const value = straightDistances[x];\r\n        area.fillVerticalLine(paddingLeft + innerWidth + x, paddingTop, innerHeight + 1, value);\r\n    }\r\n    for (let i = 1; i < paddingLeft; i++) {\r\n        const row = cornerDistances[i - 1];\r\n        const ii = paddingLeft - i;\r\n        for (let j = 1; j < paddingTop; j++) {\r\n            area.set(ii, paddingTop - j, row[j - 1]);\r\n        }\r\n        for (let j = 1; j < paddingBottom; j++) {\r\n            area.set(ii, paddingTop + innerHeight + j, row[j - 1]);\r\n        }\r\n    }\r\n    for (let i = 1; i < paddingRight; i++) {\r\n        const row = cornerDistances[i - 1];\r\n        const ii = paddingLeft + innerWidth + i;\r\n        for (let j = 1; j < paddingTop; j++) {\r\n            area.set(ii, paddingTop - j, row[j - 1]);\r\n        }\r\n        for (let j = 1; j < paddingBottom; j++) {\r\n            area.set(ii, paddingTop + innerHeight + j, row[j - 1]);\r\n        }\r\n    }\r\n    return area;\r\n}\n\nfunction rect(x, y, width, height) {\r\n    return { x, y, width, height };\r\n}\r\nfunction circle(cx, cy, radius) {\r\n    return { cx, cy, radius };\r\n}\r\nfunction line(x1, y1, x2, y2) {\r\n    return { x1, y1, x2, y2 };\r\n}\r\nfunction point(x, y) {\r\n    return { x, y };\r\n}\n\nfunction calculateVirtualEdges(items, nonMembers, maxRoutingIterations, morphBuffer) {\r\n    if (items.length === 0) {\r\n        return [];\r\n    }\r\n    const sorted = sortByDistanceToCentroid(items);\r\n    return sorted\r\n        .map((d, i) => {\r\n        const visited = sorted.slice(0, i);\r\n        return connectItem(nonMembers, d, visited, maxRoutingIterations, morphBuffer);\r\n    })\r\n        .flat();\r\n}\r\nfunction connectItem(nonMembers, item, visited, maxRoutingIterations, morphBuffer) {\r\n    const itemCenter = point(item.cx, item.cy);\r\n    const closestNeighbor = calculateClosestNeighbor(itemCenter, visited, nonMembers);\r\n    if (closestNeighbor == null) {\r\n        return [];\r\n    }\r\n    const directLine = new Line(itemCenter.x, itemCenter.y, closestNeighbor.cx, closestNeighbor.cy);\r\n    const scannedLines = computeRoute(directLine, nonMembers, maxRoutingIterations, morphBuffer);\r\n    return mergeLines(scannedLines, nonMembers);\r\n}\r\nfunction computeRoute(directLine, nonMembers, maxRoutingIterations, morphBuffer) {\r\n    const scannedLines = [];\r\n    const linesToCheck = [];\r\n    linesToCheck.push(directLine);\r\n    let hasIntersection = true;\r\n    for (let iterations = 0; iterations < maxRoutingIterations && hasIntersection; iterations++) {\r\n        hasIntersection = false;\r\n        while (!hasIntersection && linesToCheck.length > 0) {\r\n            const line = linesToCheck.pop();\r\n            const closestItem = getCenterItem(nonMembers, line);\r\n            const intersections = closestItem ? testIntersection(line, closestItem) : null;\r\n            if (!closestItem || !intersections || intersections.count !== 2) {\r\n                if (!hasIntersection) {\r\n                    scannedLines.push(line);\r\n                }\r\n                continue;\r\n            }\r\n            let tempMorphBuffer = morphBuffer;\r\n            let movePoint = rerouteLine(closestItem, tempMorphBuffer, intersections, true);\r\n            let foundFirst = pointExists(movePoint, linesToCheck) || pointExists(movePoint, scannedLines);\r\n            let pointInside = isPointInRectangles(movePoint, nonMembers);\r\n            while (!foundFirst && pointInside && tempMorphBuffer >= 1) {\r\n                tempMorphBuffer /= 1.5;\r\n                movePoint = rerouteLine(closestItem, tempMorphBuffer, intersections, true);\r\n                foundFirst = pointExists(movePoint, linesToCheck) || pointExists(movePoint, scannedLines);\r\n                pointInside = isPointInRectangles(movePoint, nonMembers);\r\n            }\r\n            if (movePoint && !foundFirst && !pointInside) {\r\n                linesToCheck.push(new Line(line.x1, line.y1, movePoint.x, movePoint.y));\r\n                linesToCheck.push(new Line(movePoint.x, movePoint.y, line.x2, line.y2));\r\n                hasIntersection = true;\r\n            }\r\n            if (hasIntersection) {\r\n                continue;\r\n            }\r\n            tempMorphBuffer = morphBuffer;\r\n            movePoint = rerouteLine(closestItem, tempMorphBuffer, intersections, false);\r\n            let foundSecond = pointExists(movePoint, linesToCheck) || pointExists(movePoint, scannedLines);\r\n            pointInside = isPointInRectangles(movePoint, nonMembers);\r\n            while (!foundSecond && pointInside && tempMorphBuffer >= 1) {\r\n                tempMorphBuffer /= 1.5;\r\n                movePoint = rerouteLine(closestItem, tempMorphBuffer, intersections, false);\r\n                foundSecond = pointExists(movePoint, linesToCheck) || pointExists(movePoint, scannedLines);\r\n                pointInside = isPointInRectangles(movePoint, nonMembers);\r\n            }\r\n            if (movePoint && !foundSecond) {\r\n                linesToCheck.push(new Line(line.x1, line.y1, movePoint.x, movePoint.y));\r\n                linesToCheck.push(new Line(movePoint.x, movePoint.y, line.x2, line.y2));\r\n                hasIntersection = true;\r\n            }\r\n            if (!hasIntersection) {\r\n                scannedLines.push(line);\r\n            }\r\n        }\r\n    }\r\n    while (linesToCheck.length > 0) {\r\n        scannedLines.push(linesToCheck.pop());\r\n    }\r\n    return scannedLines;\r\n}\r\nfunction mergeLines(scannedLines, nonMembers) {\r\n    const finalRoute = [];\r\n    while (scannedLines.length > 0) {\r\n        const line1 = scannedLines.pop();\r\n        if (scannedLines.length === 0) {\r\n            finalRoute.push(line1);\r\n            break;\r\n        }\r\n        const line2 = scannedLines.pop();\r\n        const mergeLine = new Line(line1.x1, line1.y1, line2.x2, line2.y2);\r\n        const closestItem = getCenterItem(nonMembers, mergeLine);\r\n        if (!closestItem) {\r\n            scannedLines.push(mergeLine);\r\n        }\r\n        else {\r\n            finalRoute.push(line1);\r\n            scannedLines.push(line2);\r\n        }\r\n    }\r\n    return finalRoute;\r\n}\r\nfunction calculateClosestNeighbor(itemCenter, visited, nonMembers) {\r\n    let minLengthSq = Number.POSITIVE_INFINITY;\r\n    return visited.reduce((closestNeighbor, neighborItem) => {\r\n        const distanceSq = ptsDistanceSq(itemCenter.x, itemCenter.y, neighborItem.cx, neighborItem.cy);\r\n        if (distanceSq > minLengthSq) {\r\n            return closestNeighbor;\r\n        }\r\n        const directLine = new Line(itemCenter.x, itemCenter.y, neighborItem.cx, neighborItem.cy);\r\n        const numberInterferenceItems = itemsCuttingLine(nonMembers, directLine);\r\n        if (distanceSq * (numberInterferenceItems + 1) * (numberInterferenceItems + 1) < minLengthSq) {\r\n            closestNeighbor = neighborItem;\r\n            minLengthSq = distanceSq * (numberInterferenceItems + 1) * (numberInterferenceItems + 1);\r\n        }\r\n        return closestNeighbor;\r\n    }, null);\r\n}\r\nfunction sortByDistanceToCentroid(items) {\r\n    if (items.length < 2) {\r\n        return items;\r\n    }\r\n    let totalX = 0;\r\n    let totalY = 0;\r\n    items.forEach((item) => {\r\n        totalX += item.cx;\r\n        totalY += item.cy;\r\n    });\r\n    totalX /= items.length;\r\n    totalY /= items.length;\r\n    return items\r\n        .map((item) => {\r\n        const diffX = totalX - item.cx;\r\n        const diffY = totalY - item.cy;\r\n        const dist = diffX * diffX + diffY * diffY;\r\n        return [item, dist];\r\n    })\r\n        .sort((a, b) => a[1] - b[1])\r\n        .map((d) => d[0]);\r\n}\r\nfunction isPointInRectangles(p, rects) {\r\n    return rects.some((r) => r.containsPt(p.x, p.y));\r\n}\r\nfunction pointExists(pointToCheck, lines) {\r\n    return lines.some((checkEndPointsLine) => {\r\n        if (doublePointsEqual(checkEndPointsLine.x1, checkEndPointsLine.y1, pointToCheck.x, pointToCheck.y, 1e-3)) {\r\n            return true;\r\n        }\r\n        if (doublePointsEqual(checkEndPointsLine.x2, checkEndPointsLine.y2, pointToCheck.x, pointToCheck.y, 1e-3)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n}\r\nfunction getCenterItem(items, testLine) {\r\n    let minDistance = Number.POSITIVE_INFINITY;\r\n    let closestItem = null;\r\n    for (const item of items) {\r\n        if (!intersectsLine(item, testLine)) {\r\n            continue;\r\n        }\r\n        const distance = fractionToLineCenter(item, testLine);\r\n        if (distance >= 0 && distance < minDistance) {\r\n            closestItem = item;\r\n            minDistance = distance;\r\n        }\r\n    }\r\n    return closestItem;\r\n}\r\nfunction itemsCuttingLine(items, testLine) {\r\n    return items.reduce((count, item) => {\r\n        if (intersectsLine(item, testLine) && hasFractionToLineCenter(item, testLine)) {\r\n            return count + 1;\r\n        }\r\n        return count;\r\n    }, 0);\r\n}\r\nfunction rerouteLine(item, rerouteBuffer, intersections, wrapNormal) {\r\n    const topIntersect = intersections.top;\r\n    const leftIntersect = intersections.left;\r\n    const bottomIntersect = intersections.bottom;\r\n    const rightIntersect = intersections.right;\r\n    if (wrapNormal) {\r\n        if (leftIntersect.state === EState.POINT) {\r\n            if (topIntersect.state === EState.POINT)\r\n                return point(item.x - rerouteBuffer, item.y - rerouteBuffer);\r\n            if (bottomIntersect.state === EState.POINT)\r\n                return point(item.x - rerouteBuffer, item.y2 + rerouteBuffer);\r\n            const totalArea = item.width * item.height;\r\n            const topArea = item.width * ((leftIntersect.y - item.y + (rightIntersect.y - item.y)) * 0.5);\r\n            if (topArea < totalArea * 0.5) {\r\n                if (leftIntersect.y > rightIntersect.y)\r\n                    return point(item.x - rerouteBuffer, item.y - rerouteBuffer);\r\n                return point(item.x2 + rerouteBuffer, item.y - rerouteBuffer);\r\n            }\r\n            if (leftIntersect.y < rightIntersect.y)\r\n                return point(item.x - rerouteBuffer, item.y2 + rerouteBuffer);\r\n            return point(item.x2 + rerouteBuffer, item.y2 + rerouteBuffer);\r\n        }\r\n        if (rightIntersect.state === EState.POINT) {\r\n            if (topIntersect.state === EState.POINT)\r\n                return point(item.x2 + rerouteBuffer, item.y - rerouteBuffer);\r\n            if (bottomIntersect.state === EState.POINT)\r\n                return point(item.x2 + rerouteBuffer, item.y2 + rerouteBuffer);\r\n        }\r\n        const totalArea = item.height * item.width;\r\n        const leftArea = item.height * ((topIntersect.x - item.x + (rightIntersect.x - item.x)) * 0.5);\r\n        if (leftArea < totalArea * 0.5) {\r\n            if (topIntersect.x > bottomIntersect.x)\r\n                return point(item.x - rerouteBuffer, item.y - rerouteBuffer);\r\n            return point(item.x - rerouteBuffer, item.y2 + rerouteBuffer);\r\n        }\r\n        if (topIntersect.x < bottomIntersect.x)\r\n            return point(item.x2 + rerouteBuffer, item.y - rerouteBuffer);\r\n        return point(item.x2 + rerouteBuffer, item.y2 + rerouteBuffer);\r\n    }\r\n    if (leftIntersect.state === EState.POINT) {\r\n        if (topIntersect.state === EState.POINT)\r\n            return point(item.x2 + rerouteBuffer, item.y2 + rerouteBuffer);\r\n        if (bottomIntersect.state === EState.POINT)\r\n            return point(item.x2 + rerouteBuffer, item.y - rerouteBuffer);\r\n        const totalArea = item.height * item.width;\r\n        const topArea = item.width * ((leftIntersect.y - item.y + (rightIntersect.y - item.y)) * 0.5);\r\n        if (topArea < totalArea * 0.5) {\r\n            if (leftIntersect.y > rightIntersect.y)\r\n                return point(item.x2 + rerouteBuffer, item.y2 + rerouteBuffer);\r\n            return point(item.x - rerouteBuffer, item.y2 + rerouteBuffer);\r\n        }\r\n        if (leftIntersect.y < rightIntersect.y)\r\n            return point(item.x2 + rerouteBuffer, item.y - rerouteBuffer);\r\n        return point(item.x - rerouteBuffer, item.y - rerouteBuffer);\r\n    }\r\n    if (rightIntersect.state === EState.POINT) {\r\n        if (topIntersect.state === EState.POINT)\r\n            return point(item.x - rerouteBuffer, item.y2 + rerouteBuffer);\r\n        if (bottomIntersect.state === EState.POINT)\r\n            return point(item.x - rerouteBuffer, item.y - rerouteBuffer);\r\n    }\r\n    const totalArea = item.height * item.width;\r\n    const leftArea = item.height * ((topIntersect.x - item.x + (rightIntersect.x - item.x)) * 0.5);\r\n    if (leftArea < totalArea * 0.5) {\r\n        if (topIntersect.x > bottomIntersect.x)\r\n            return point(item.x2 + rerouteBuffer, item.y2 + rerouteBuffer);\r\n        return point(item.x2 + rerouteBuffer, item.y - rerouteBuffer);\r\n    }\r\n    if (topIntersect.x < bottomIntersect.x)\r\n        return point(item.x - rerouteBuffer, item.y2 + rerouteBuffer);\r\n    return point(item.x - rerouteBuffer, item.y - rerouteBuffer);\r\n}\n\nfunction canTakeNext(path, start, end, toleranceSquared) {\r\n    const validEnd = path.closed ? end < path.length : end < path.length - 1;\r\n    if (!validEnd) {\r\n        return false;\r\n    }\r\n    const s = path.get(start);\r\n    const e = path.get(end + 1);\r\n    for (let index = start + 1; index <= end; index++) {\r\n        const p = path.get(index);\r\n        const len = linePtSegDistSq(s.x, s.y, e.x, e.y, p.x, p.y);\r\n        if (len > toleranceSquared) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction shapeSimplifier(tolerance = 0.0) {\r\n    return (path) => {\r\n        if (tolerance < 0 || path.length < 3) {\r\n            return path;\r\n        }\r\n        const points = [];\r\n        let start = 0;\r\n        const toleranceSquared = tolerance * tolerance;\r\n        while (start < path.length) {\r\n            let end = start + 1;\r\n            while (canTakeNext(path, start, end, toleranceSquared)) {\r\n                end++;\r\n            }\r\n            points.push(path.get(start));\r\n            start = end;\r\n        }\r\n        return new PointPath(points);\r\n    };\r\n}\n\nfunction basicFunction(i, t) {\r\n    switch (i) {\r\n        case -2:\r\n            return (((-t + 3.0) * t - 3.0) * t + 1.0) / 6.0;\r\n        case -1:\r\n            return ((3.0 * t - 6.0) * t * t + 4.0) / 6.0;\r\n        case 0:\r\n            return (((-3.0 * t + 3.0) * t + 3.0) * t + 1.0) / 6.0;\r\n        case 1:\r\n            return (t * t * t) / 6.0;\r\n        default:\r\n            throw new Error('unknown error');\r\n    }\r\n}\r\nfunction bSplineShapeGenerator(granularity = 6.0) {\r\n    const ORDER = 3;\r\n    const START_INDEX = ORDER - 1;\r\n    const REL_END = 1;\r\n    const REL_START = REL_END - ORDER;\r\n    function calcPoint(path, i, t) {\r\n        let px = 0.0;\r\n        let py = 0.0;\r\n        for (let j = REL_START; j <= REL_END; j++) {\r\n            const p = path.get(i + j);\r\n            const bf = basicFunction(j, t);\r\n            px += bf * p.x;\r\n            py += bf * p.y;\r\n        }\r\n        return { x: px, y: py };\r\n    }\r\n    return (path) => {\r\n        if (path.length < 3) {\r\n            return path;\r\n        }\r\n        const res = [];\r\n        const closed = path.closed;\r\n        const count = path.length + ORDER - 1 + (closed ? 0 : 2);\r\n        res.push(calcPoint(path, START_INDEX - (closed ? 0 : 2), 0));\r\n        for (let ix = START_INDEX - (closed ? 0 : 2); ix < count; ix++) {\r\n            for (let k = 1; k <= granularity; k++) {\r\n                res.push(calcPoint(path, ix, k / granularity));\r\n            }\r\n        }\r\n        return new PointPath(res);\r\n    };\r\n}\n\nfunction samplePath(skip = 8) {\r\n    return (path) => {\r\n        let actSkip = skip;\r\n        let size = path.length;\r\n        if (actSkip > 1) {\r\n            size = Math.floor(path.length / actSkip);\r\n            while (size < 3 && actSkip > 1) {\r\n                actSkip -= 1;\r\n                size = Math.floor(path.length / actSkip);\r\n            }\r\n        }\r\n        const finalHull = [];\r\n        for (let i = 0, j = 0; j < size; j++, i += actSkip) {\r\n            finalHull.push(path.get(i));\r\n        }\r\n        return new PointPath(finalHull);\r\n    };\r\n}\n\nclass PointPath {\r\n    constructor(points = [], closed = true) {\r\n        this.points = points;\r\n        this.closed = closed;\r\n    }\r\n    get(index) {\r\n        const i = index;\r\n        const l = this.points.length;\r\n        if (index < 0) {\r\n            return this.closed ? this.get(index + l) : this.points[0];\r\n        }\r\n        else if (index >= l) {\r\n            return this.closed ? this.get(index - l) : this.points[l - 1];\r\n        }\r\n        return this.points[i];\r\n    }\r\n    get length() {\r\n        return this.points.length;\r\n    }\r\n    toString(roundToDigits = Infinity) {\r\n        const points = this.points;\r\n        if (points.length === 0) {\r\n            return '';\r\n        }\r\n        const rounder = typeof roundToDigits === 'function' ? roundToDigits : round(roundToDigits);\r\n        let r = 'M';\r\n        for (const p of points) {\r\n            r += `${rounder(p.x)},${rounder(p.y)} L`;\r\n        }\r\n        r = r.slice(0, -1);\r\n        if (this.closed) {\r\n            r += ' Z';\r\n        }\r\n        return r;\r\n    }\r\n    draw(ctx) {\r\n        const points = this.points;\r\n        if (points.length === 0) {\r\n            return;\r\n        }\r\n        ctx.beginPath();\r\n        ctx.moveTo(points[0].x, points[0].y);\r\n        for (const p of points) {\r\n            ctx.lineTo(p.x, p.y);\r\n        }\r\n        if (this.closed) {\r\n            ctx.closePath();\r\n        }\r\n    }\r\n    sample(skip) {\r\n        return samplePath(skip)(this);\r\n    }\r\n    simplify(tolerance) {\r\n        return shapeSimplifier(tolerance)(this);\r\n    }\r\n    bSplines(granularity) {\r\n        return bSplineShapeGenerator(granularity)(this);\r\n    }\r\n    apply(transformer) {\r\n        return transformer(this);\r\n    }\r\n    containsElements(members) {\r\n        const bb = boundingBox(this.points);\r\n        if (!bb) {\r\n            return false;\r\n        }\r\n        return members.every((member) => {\r\n            return bb.containsPt(member.cx, member.cy) && this.withinArea(member.cx, member.cy);\r\n        });\r\n    }\r\n    withinArea(px, py) {\r\n        if (this.length === 0) {\r\n            return false;\r\n        }\r\n        let crossings = 0;\r\n        const first = this.points[0];\r\n        const line = new Line(first.x, first.y, first.x, first.y);\r\n        for (let i = 1; i < this.points.length; i++) {\r\n            const cur = this.points[i];\r\n            line.x1 = line.x2;\r\n            line.y1 = line.y2;\r\n            line.x2 = cur.x;\r\n            line.y2 = cur.y;\r\n            if (line.cuts(px, py)) {\r\n                crossings++;\r\n            }\r\n        }\r\n        line.x1 = line.x2;\r\n        line.y1 = line.y2;\r\n        line.x2 = first.x;\r\n        line.y2 = first.y;\r\n        if (line.cuts(px, py)) {\r\n            crossings++;\r\n        }\r\n        return crossings % 2 === 1;\r\n    }\r\n}\n\nclass PointList {\r\n    constructor(size = 0) {\r\n        this.count = 0;\r\n        this.arr = [];\r\n        this.set = new Set();\r\n        this.arr.length = size;\r\n    }\r\n    add(p) {\r\n        this.set.add(`${p.x}x${p.y}`);\r\n        this.arr[this.count++] = p;\r\n    }\r\n    contains(p) {\r\n        return this.set.has(`${p.x}x${p.y}`);\r\n    }\r\n    isFirst(p) {\r\n        if (this.count === 0) {\r\n            return false;\r\n        }\r\n        const o = this.arr[0];\r\n        return o != null && o.x === p.x && o.y === p.y;\r\n    }\r\n    path() {\r\n        return new PointPath(this.arr.slice(0, this.count));\r\n    }\r\n    clear() {\r\n        this.set.clear();\r\n        this.count = 0;\r\n    }\r\n    get(ix) {\r\n        return this.arr[ix];\r\n    }\r\n    get length() {\r\n        return this.count;\r\n    }\r\n}\n\nconst N = 0;\r\nconst S = 1;\r\nconst E = 2;\r\nconst W = 3;\r\nfunction marchingSquares(potentialArea, threshold) {\r\n    const estLength = (Math.floor(potentialArea.width) + Math.floor(potentialArea.height)) * 2;\r\n    const contour = new PointList(estLength);\r\n    function updateDir(x, y, dir, res) {\r\n        const v = potentialArea.get(x, y);\r\n        if (Number.isNaN(v)) {\r\n            return Number.NaN;\r\n        }\r\n        if (v > threshold) {\r\n            return dir + res;\r\n        }\r\n        return dir;\r\n    }\r\n    function getState(x, y) {\r\n        let dir = N;\r\n        dir = updateDir(x, y, dir, 1);\r\n        dir = updateDir(x + 1, y, dir, 2);\r\n        dir = updateDir(x, y + 1, dir, 4);\r\n        dir = updateDir(x + 1, y + 1, dir, 8);\r\n        if (Number.isNaN(dir)) {\r\n            return -1;\r\n        }\r\n        return dir;\r\n    }\r\n    let direction = S;\r\n    function doMarch(xPos, yPos) {\r\n        let x = xPos;\r\n        let y = yPos;\r\n        let xPixel = potentialArea.invertScaleX(x);\r\n        let yPixel = potentialArea.invertScaleY(y);\r\n        for (let i = 0; i < potentialArea.width * potentialArea.height; i++) {\r\n            const p = { x: xPixel, y: yPixel };\r\n            if (contour.contains(p)) {\r\n                if (!contour.isFirst(p)) ;\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n            else {\r\n                contour.add(p);\r\n            }\r\n            const state = getState(x, y);\r\n            switch (state) {\r\n                case -1:\r\n                    return true;\r\n                case 0:\r\n                case 3:\r\n                case 2:\r\n                case 7:\r\n                    direction = E;\r\n                    break;\r\n                case 12:\r\n                case 14:\r\n                case 4:\r\n                    direction = W;\r\n                    break;\r\n                case 6:\r\n                    direction = direction === N ? W : E;\r\n                    break;\r\n                case 1:\r\n                case 13:\r\n                case 5:\r\n                    direction = N;\r\n                    break;\r\n                case 9:\r\n                    direction = direction === E ? N : S;\r\n                    break;\r\n                case 10:\r\n                case 8:\r\n                case 11:\r\n                    direction = S;\r\n                    break;\r\n                default:\r\n                    console.warn('Marching squares invalid state: ' + state);\r\n                    return true;\r\n            }\r\n            switch (direction) {\r\n                case N:\r\n                    y--;\r\n                    yPixel -= potentialArea.pixelGroup;\r\n                    break;\r\n                case S:\r\n                    y++;\r\n                    yPixel += potentialArea.pixelGroup;\r\n                    break;\r\n                case W:\r\n                    x--;\r\n                    xPixel -= potentialArea.pixelGroup;\r\n                    break;\r\n                case E:\r\n                    x++;\r\n                    xPixel += potentialArea.pixelGroup;\r\n                    break;\r\n                default:\r\n                    console.warn('Marching squares invalid state: ' + state);\r\n                    return true;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    for (let x = 0; x < potentialArea.width; x++) {\r\n        for (let y = 0; y < potentialArea.height; y++) {\r\n            if (potentialArea.get(x, y) <= threshold) {\r\n                continue;\r\n            }\r\n            const state = getState(x, y);\r\n            if (state < 0 || state === 15) {\r\n                continue;\r\n            }\r\n            if (doMarch(x, y)) {\r\n                return contour.path();\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\n\nconst defaultOptions = {\r\n    maxRoutingIterations: 100,\r\n    maxMarchingIterations: 20,\r\n    pixelGroup: 4,\r\n    edgeR0: 10,\r\n    edgeR1: 20,\r\n    nodeR0: 15,\r\n    nodeR1: 50,\r\n    morphBuffer: 10,\r\n    threshold: 1,\r\n    memberInfluenceFactor: 1,\r\n    edgeInfluenceFactor: 1,\r\n    nonMemberInfluenceFactor: -0.8,\r\n    virtualEdges: true,\r\n};\r\nfunction isCircle(v) {\r\n    return v != null && typeof v.radius === 'number';\r\n}\r\nfunction isEqual(a, b) {\r\n    if (isCircle(a) !== isCircle(b)) {\r\n        return false;\r\n    }\r\n    if (isCircle(a)) {\r\n        const bc = b;\r\n        return a.cx === bc.cx && a.cy === bc.cy && a.radius === bc.radius;\r\n    }\r\n    const br = b;\r\n    return a.x === br.x && a.y === br.y && a.width === br.width && a.height === br.height;\r\n}\r\nvar EDirty;\r\n(function (EDirty) {\r\n    EDirty[EDirty[\"MEMBERS\"] = 0] = \"MEMBERS\";\r\n    EDirty[EDirty[\"NON_MEMBERS\"] = 1] = \"NON_MEMBERS\";\r\n    EDirty[EDirty[\"EDGES\"] = 2] = \"EDGES\";\r\n})(EDirty || (EDirty = {}));\r\nclass BubbleSets {\r\n    constructor(options = {}) {\r\n        this.dirty = new Set();\r\n        this.members = [];\r\n        this.nonMembers = [];\r\n        this.virtualEdges = [];\r\n        this.edges = [];\r\n        this.activeRegion = new Rectangle(0, 0, 0, 0);\r\n        this.potentialArea = new Area(1, 0, 0, 0, 0, 0, 0);\r\n        this.o = Object.assign({}, defaultOptions, options);\r\n    }\r\n    pushMember(...members) {\r\n        if (members.length === 0) {\r\n            return;\r\n        }\r\n        this.dirty.add(EDirty.MEMBERS);\r\n        for (const v of members) {\r\n            this.members.push({\r\n                raw: v,\r\n                obj: isCircle(v) ? Circle.from(v) : Rectangle.from(v),\r\n                area: null,\r\n            });\r\n        }\r\n    }\r\n    removeMember(member) {\r\n        const index = this.members.findIndex((d) => isEqual(d.raw, member));\r\n        if (index < 0) {\r\n            return false;\r\n        }\r\n        this.members.splice(index, 1);\r\n        this.dirty.add(EDirty.MEMBERS);\r\n        return true;\r\n    }\r\n    removeNonMember(nonMember) {\r\n        const index = this.nonMembers.findIndex((d) => isEqual(d.raw, nonMember));\r\n        if (index < 0) {\r\n            return false;\r\n        }\r\n        this.nonMembers.splice(index, 1);\r\n        this.dirty.add(EDirty.NON_MEMBERS);\r\n        return true;\r\n    }\r\n    removeEdge(edge) {\r\n        const index = this.edges.findIndex((d) => d.obj.equals(edge));\r\n        if (index < 0) {\r\n            return false;\r\n        }\r\n        this.edges.splice(index, 1);\r\n        this.dirty.add(EDirty.NON_MEMBERS);\r\n        return true;\r\n    }\r\n    pushNonMember(...nonMembers) {\r\n        if (nonMembers.length === 0) {\r\n            return;\r\n        }\r\n        this.dirty.add(EDirty.NON_MEMBERS);\r\n        for (const v of nonMembers) {\r\n            this.nonMembers.push({\r\n                raw: v,\r\n                obj: isCircle(v) ? Circle.from(v) : Rectangle.from(v),\r\n                area: null,\r\n            });\r\n        }\r\n    }\r\n    pushEdge(...edges) {\r\n        if (edges.length === 0) {\r\n            return;\r\n        }\r\n        this.dirty.add(EDirty.EDGES);\r\n        for (const v of edges) {\r\n            this.edges.push({\r\n                raw: v,\r\n                obj: Line.from(v),\r\n                area: null,\r\n            });\r\n        }\r\n    }\r\n    update() {\r\n        const dirtyMembers = this.dirty.has(EDirty.MEMBERS);\r\n        const dirtyNonMembers = this.dirty.has(EDirty.NON_MEMBERS);\r\n        let dirtyEdges = this.dirty.has(EDirty.EDGES);\r\n        this.dirty.clear();\r\n        const memberObjs = this.members.map((d) => d.obj);\r\n        if (this.o.virtualEdges && (dirtyMembers || dirtyNonMembers)) {\r\n            const nonMembersAsRects = this.nonMembers.map((d) => d.obj);\r\n            const virtualEdges = calculateVirtualEdges(memberObjs, nonMembersAsRects, this.o.maxRoutingIterations, this.o.morphBuffer);\r\n            const old = new Map(this.virtualEdges.map((e) => [e.obj.toString(), e.area]));\r\n            this.virtualEdges = virtualEdges.map((e) => {\r\n                var _a;\r\n                return ({\r\n                    raw: e,\r\n                    obj: e,\r\n                    area: (_a = old.get(e.toString())) !== null && _a !== void 0 ? _a : null,\r\n                });\r\n            });\r\n            dirtyEdges = true;\r\n        }\r\n        let activeRegionDirty = false;\r\n        if (dirtyMembers || dirtyEdges) {\r\n            const edgesObj = this.virtualEdges.concat(this.edges).map((e) => e.obj);\r\n            const bb = unionBoundingBox(memberObjs, edgesObj);\r\n            const padding = Math.max(this.o.edgeR1, this.o.nodeR1) + this.o.morphBuffer;\r\n            const activeRegion = Rectangle.from(addPadding(bb, padding));\r\n            if (!activeRegion.equals(this.activeRegion)) {\r\n                activeRegionDirty = true;\r\n                this.activeRegion = activeRegion;\r\n            }\r\n        }\r\n        if (activeRegionDirty) {\r\n            const potentialWidth = Math.ceil(this.activeRegion.width / this.o.pixelGroup);\r\n            const potentialHeight = Math.ceil(this.activeRegion.height / this.o.pixelGroup);\r\n            if (this.activeRegion.x !== this.potentialArea.pixelX || this.activeRegion.y !== this.potentialArea.pixelY) {\r\n                this.potentialArea = Area.fromPixelRegion(this.activeRegion, this.o.pixelGroup);\r\n                this.members.forEach((m) => (m.area = null));\r\n                this.nonMembers.forEach((m) => (m.area = null));\r\n                this.edges.forEach((m) => (m.area = null));\r\n                this.virtualEdges.forEach((m) => (m.area = null));\r\n            }\r\n            else if (potentialWidth !== this.potentialArea.width || potentialHeight !== this.potentialArea.height) {\r\n                this.potentialArea = Area.fromPixelRegion(this.activeRegion, this.o.pixelGroup);\r\n            }\r\n        }\r\n        const existing = new Map();\r\n        const addCache = (m) => {\r\n            if (m.area) {\r\n                const key = `${m.obj.width}x${m.obj.height}x${m.obj instanceof Rectangle ? 'R' : 'C'}`;\r\n                existing.set(key, m.area);\r\n            }\r\n        };\r\n        const createOrAddCache = (m) => {\r\n            if (m.area) {\r\n                return;\r\n            }\r\n            const key = `${m.obj.width}x${m.obj.height}x${m.obj instanceof Rectangle ? 'R' : 'C'}`;\r\n            if (existing.has(key)) {\r\n                const r = existing.get(key);\r\n                m.area = this.potentialArea.copy(r, { x: m.obj.x - this.o.nodeR1, y: m.obj.y - this.o.nodeR1 });\r\n                return;\r\n            }\r\n            const r = m.obj instanceof Rectangle\r\n                ? createRectangleInfluenceArea(m.obj, this.potentialArea, this.o.nodeR1)\r\n                : createGenericInfluenceArea(m.obj, this.potentialArea, this.o.nodeR1);\r\n            m.area = r;\r\n            existing.set(key, r);\r\n        };\r\n        this.members.forEach(addCache);\r\n        this.nonMembers.forEach(addCache);\r\n        this.members.forEach(createOrAddCache);\r\n        this.nonMembers.forEach((m) => {\r\n            if (!this.activeRegion.intersects(m.obj)) {\r\n                m.area = null;\r\n            }\r\n            else {\r\n                createOrAddCache(m);\r\n            }\r\n        });\r\n        this.edges.forEach((edge) => {\r\n            if (!edge.area) {\r\n                edge.area = createLineInfluenceArea(edge.obj, this.potentialArea, this.o.edgeR1);\r\n            }\r\n        });\r\n        this.virtualEdges.forEach((edge) => {\r\n            if (!edge.area) {\r\n                edge.area = createLineInfluenceArea(edge.obj, this.potentialArea, this.o.edgeR1);\r\n            }\r\n        });\r\n    }\r\n    drawMembers(ctx) {\r\n        for (const member of this.members) {\r\n            member.obj.draw(ctx);\r\n        }\r\n    }\r\n    drawNonMembers(ctx) {\r\n        for (const member of this.nonMembers) {\r\n            member.obj.draw(ctx);\r\n        }\r\n    }\r\n    drawEdges(ctx) {\r\n        for (const edge of this.edges) {\r\n            edge.obj.draw(ctx);\r\n        }\r\n    }\r\n    drawPotentialArea(ctx, offset = true) {\r\n        this.potentialArea.draw(ctx, offset);\r\n    }\r\n    compute() {\r\n        if (this.members.length === 0) {\r\n            return new PointPath([]);\r\n        }\r\n        if (this.dirty.size > 0) {\r\n            this.update();\r\n        }\r\n        const { o, potentialArea } = this;\r\n        const members = this.members.map((m) => m.area);\r\n        const edges = this.virtualEdges.concat(this.edges).map((d) => d.area);\r\n        const nonMembers = this.nonMembers.filter((d) => d.area != null).map((d) => d.area);\r\n        const memberObjs = this.members.map((m) => m.obj);\r\n        return calculatePotentialOutline(potentialArea, members, edges, nonMembers, (p) => p.containsElements(memberObjs), o);\r\n    }\r\n}\r\nfunction calculatePotentialOutline(potentialArea, members, edges, nonMembers, validPath, options = {}) {\r\n    const o = Object.assign({}, defaultOptions, options);\r\n    let threshold = o.threshold;\r\n    let memberInfluenceFactor = o.memberInfluenceFactor;\r\n    let edgeInfluenceFactor = o.edgeInfluenceFactor;\r\n    let nonMemberInfluenceFactor = o.nonMemberInfluenceFactor;\r\n    const nodeInfA = (o.nodeR0 - o.nodeR1) * (o.nodeR0 - o.nodeR1);\r\n    const edgeInfA = (o.edgeR0 - o.edgeR1) * (o.edgeR0 - o.edgeR1);\r\n    for (let iterations = 0; iterations < o.maxMarchingIterations; iterations++) {\r\n        potentialArea.clear();\r\n        if (memberInfluenceFactor !== 0) {\r\n            const f = memberInfluenceFactor / nodeInfA;\r\n            for (const item of members) {\r\n                potentialArea.incArea(item, f);\r\n            }\r\n        }\r\n        if (edgeInfluenceFactor !== 0) {\r\n            const f = edgeInfluenceFactor / edgeInfA;\r\n            for (const area of edges) {\r\n                potentialArea.incArea(area, f);\r\n            }\r\n        }\r\n        if (nonMemberInfluenceFactor !== 0) {\r\n            const f = nonMemberInfluenceFactor / nodeInfA;\r\n            for (const area of nonMembers) {\r\n                potentialArea.incArea(area, f);\r\n            }\r\n        }\r\n        const contour = marchingSquares(potentialArea, threshold);\r\n        if (contour && validPath(contour)) {\r\n            return contour;\r\n        }\r\n        threshold *= 0.95;\r\n        if (iterations <= o.maxMarchingIterations * 0.5) {\r\n            memberInfluenceFactor *= 1.2;\r\n            edgeInfluenceFactor *= 1.2;\r\n        }\r\n        else if (nonMemberInfluenceFactor !== 0 && nonMembers.length > 0) {\r\n            nonMemberInfluenceFactor *= 0.8;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return new PointPath([]);\r\n}\r\nfunction unionBoundingBox(memberItems, edgeItems) {\r\n    if (memberItems.length === 0) {\r\n        return new Rectangle(0, 0, 0, 0);\r\n    }\r\n    const activeRegion = Rectangle.from(memberItems[0]);\r\n    for (const m of memberItems) {\r\n        activeRegion.add(m);\r\n    }\r\n    for (const l of edgeItems) {\r\n        activeRegion.add(lineBoundingBox(l));\r\n    }\r\n    return activeRegion;\r\n}\r\nfunction createOutline(members, nonMembers = [], edges = [], options = {}) {\r\n    if (members.length === 0) {\r\n        return new PointPath([]);\r\n    }\r\n    const bb = new BubbleSets(options);\r\n    bb.pushMember(...members);\r\n    bb.pushNonMember(...nonMembers);\r\n    bb.pushEdge(...edges);\r\n    return bb.compute();\r\n}\n\nexport { Area, BubbleSets, Circle, Line, PointPath, Rectangle, addPadding, boundingBox, calculatePotentialOutline, calculateVirtualEdges, circle, createGenericInfluenceArea, createLineInfluenceArea, createOutline, createRectangleInfluenceArea, BubbleSets as default, defaultOptions, line, lineBoundingBox, point, rect, unionBoundingBox };\n//# sourceMappingURL=index.js.map\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n",null,null,null],"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","linePtSegDistSq","lx1","ly1","lx2","ly2","x","y","x2","y2","px","py","dotprod","projlenSq","lenSq","ptsDistanceSq","x1","y1","doublePointsEqual","delta","SuppressedError","digits","Number","isFinite","v","Math","round","factor","pow","FUNC_ERROR_TEXT","NAN","symbolTag","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","freeGlobal","global","Object","freeSelf","self","root","Function","objectToString","prototype","toString","nativeMax","max","nativeMin","min","now","Date","debounce","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","args","thisArg","undefined","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","remainingWait","debounced","isInvoking","arguments","this","leadingEdge","toNumber","isObject","cancel","clearTimeout","flush","type","isObjectLike","isSymbol","other","valueOf","replace","isBinary","test","slice","round2","SCRATCH_KEY","circularBase","circular","Set","concat","map","toNodeKey","data","shape","width","height","isCircle","toEdgeKey","line","createShape","bb","Circle","w","h","Rectangle","BubbleSetPath","constructor","adapter","node","nodes","edges","avoidNodes","_BubbleSetPath_activeArea","_BubbleSetPath_potentialArea","Area","_BubbleSetPath_options","_BubbleSetPath_virtualEdgeAreas","Map","_BubbleSetPath_throttledUpdate","_BubbleSetPath_adder","_BubbleSetPath_remover","_BubbleSetPath_adapter","update","forceUpdate","union","boundingBox","potentialAreaDirty","padding","edgeR1","nodeR1","morphBuffer","nextPotentialBB","fromPixelRegion","pixelGroup","potentialArea","cache","forEach","n","_a","scratch","area","updateEdges","updateNodeData","nodeBB","style","copy","key","cached","createGenericInfluenceArea","createRectangleInfluenceArea","members","nonMembers","edgeCache","lines","i","areas","updateEdgeArea","r","createLineInfluenceArea","e","ps","segmentPoints","sourceEndpoint","targetEndpoint","d","length","next","prev","Line","from","_b","a","b","every","ai","push","memberShapes","virtualEdges","nonMembersShapes","calculateVirtualEdges","maxRoutingIterations","clear","memberAreas","filter","nonMemberAreas","path","calculatePotentialOutline","p","containsElements","setAttribute","sample","simplify","bSplines","defaultOptions","stroke","fill","fillOpacity","className","throttle","interactive","includeLabels","includeMainLabels","includeOverlays","includeSourceLabels","includeTargetLabels","assign","classList","add","addEventListener","select","target","on","off","remove","BubbleSetsPlugin","currentCy","_BubbleSetsPlugin_layers","_BubbleSetsPlugin_adapter","index","indexOf","splice","_BubbleSetsPlugin_cy","_BubbleSetsPlugin_options","layer","layers","nodeLayer","insertBefore","destroy","addPath","collection","ownerDocument","createElementNS","appendChild","getPaths","removePath","bubbleSets","register","cytoscape","window"],"mappings":"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","x_google_ignoreList":[0,1,2]}